(batch utilities_v3.clp)
/**
* Ethan Wong
* August 29, 2022
* Generates the numbers of the fiboancci sequence based on user input
*/

/**
* Outputs values generated by the fibonacci sequence
* @param <num> the numbers of fibnoacci sequence generated
* @return the numbers of fibonacci
*/
(deffunction fibo(?num)

   (bind ?num (integer ?num))
   (bind ?fiboList (create$))
   (bind ?fib1 0)
   (bind ?fib2 1)

   (for (bind ?i 1) (>= ?num ?i) (++ ?i)
      (bind ?fiboList (append$ ?fiboList ?fib1))
      (bind ?nextFib (+ ?fib1 ?fib2))
      (bind ?fib1 ?fib2)
      (bind ?fib2 ?nextFib)
   )
   
   (return ?fiboList)

)

/**
* Checks to see if a number is an index that can produce a fibonacci seqeuence
* @param ?num the number being checked
* @return true if the number can produce a sequence; otherwise,
*         false
*/
(deffunction fibbable(?num)

   (bind ?a (>= ?num 0))
   
   (bind ?numConc (integer ?num))
   (bind ?b (= ?num ?numConc))
   return (and ?a ?b)
)

/**
* Combines fibo(?num) and fibbable(?num) to output either FALSE or a fibonacci sequence
* @param <num> the numbers of fibonacci seqeunce generated
* @return the numbers of fibonacci; otherwise,
*         false
*/
(deffunction fibonacci(?num)

   (bind ?r FALSE) ; can either be FALSE, or a seqeunce of fibonacci

   (if (not (numberp ?num)) then (printout t "Please input a number!" crlf)
    else 
       (if (not(fibbable ?num)) then (printout t "Your inputted number was not fibbable" crlf)
        else (bind ?r (fibo ?num))
       )
   )

   (return ?r)
)

/**
* Prompts the user for an input that produces that many numbers of the fibonacci sequence
* @return the seqeuence of fibonacci generated or an error message
*/
(deffunction fib()

   (bind ?fibNum (ask "Input a number of how many numbers of fibonacci you want generated "))
   
   (while (numberp ?fibNum)
      (printout t (fibonacci ?fibNum) crlf)
      (bind ?fibNum (ask "Input another number if you would like to play again "))
   )

   (return "You didn't input a number, goodbye!")

)


